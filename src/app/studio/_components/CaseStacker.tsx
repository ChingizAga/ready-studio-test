/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/40425-cs-stkr.gltf -o app/studio-test/_components/CaseStacker.tsx 
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { SkeletonUtils, GLTF } from "three-stdlib";
import { useGraph } from "@react-three/fiber";
import { CanvasTexture } from "three";
import * as THREE from "three";
import React from "react";
type ActionName = "Animation";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = {
  nodes: {
    Out_Body_Center_Bot: THREE.SkinnedMesh;
    In_Body_Center_Bot: THREE.SkinnedMesh;
    Out_Body_Right_Bot: THREE.SkinnedMesh;
    In_Body_Right_Bot: THREE.SkinnedMesh;
    Out_Body_Left_Bot: THREE.SkinnedMesh;
    Out_Body_Right_In: THREE.SkinnedMesh;
    In_Body_Left_Bot: THREE.SkinnedMesh;
    Out_Body_Left_In: THREE.SkinnedMesh;
    Out_Body_Center: THREE.SkinnedMesh;
    Out_Shelf_Front: THREE.SkinnedMesh;
    In_Body_Center: THREE.SkinnedMesh;
    Out_Body_Front: THREE.SkinnedMesh;
    Out_Body_Right: THREE.SkinnedMesh;
    In_Body_Right: THREE.SkinnedMesh;
    Out_Body_Left: THREE.SkinnedMesh;
    ["Gap-Shelf"]: THREE.SkinnedMesh;
    In_Shelf_Back: THREE.SkinnedMesh;
    In_Body_Left: THREE.SkinnedMesh;
    Gap_Header: THREE.SkinnedMesh;
    Out_Header: THREE.SkinnedMesh;
    In_Header: THREE.SkinnedMesh;
    Out_Shelf: THREE.SkinnedMesh;
    Gap_Body: THREE.SkinnedMesh;
    In_Shelf: THREE.SkinnedMesh;
    In_Body: THREE.SkinnedMesh;
    neutral_bone_1: THREE.Bone;
    neutral_bone_2: THREE.Bone;
    neutral_bone: THREE.Bone;
    Bone001_1: THREE.Bone;
    Bone002_1: THREE.Bone;
    Bone004_1: THREE.Bone;
    Bone008: THREE.Bone;
    Bone015: THREE.Bone;
    Bone011: THREE.Bone;
    Bone013: THREE.Bone;
    Bone019: THREE.Bone;
    Bone_1: THREE.Bone;
    Bone_2: THREE.Bone;
    Bone: THREE.Bone;
  };
  materials: {
    ["Material.006"]: THREE.MeshStandardMaterial;
    ["Material.005"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
} & GLTF;

export function CaseStacker(props: JSX.IntrinsicElements["group"]) {
  const group = React.useRef<THREE.Group>(null);
  const { animations, scene } = useGLTF("/models/40425-cs-stkr.gltf");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { materials, nodes } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  const texture = React.useMemo(() => {
    return new CanvasTexture(props.canvasRef.current);
  }, [props.canvasRef]);
  texture.flipY = false;
  texture.anisotropy = 2;

  const materialRef = React.useRef(null);
  const meshRef = React.useRef(null);

  useFrame(() => {
    texture.needsUpdate = true;
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group
          rotation={[0, 0, Math.PI / 2]}
          position={[0.047, 0.078, 0]}
          name="Armature001"
        >
          <primitive object={nodes.Bone} />
          <primitive object={nodes.Bone008} />
          <primitive object={nodes.Bone015} />
          <primitive object={nodes.Bone011} />
          <primitive object={nodes.Bone013} />
          <primitive object={nodes.Bone019} />
          <primitive object={nodes.neutral_bone} />
          <skinnedMesh
            geometry={nodes.Gap_Body.geometry}
            material={nodes.Gap_Body.material}
            skeleton={nodes.Gap_Body.skeleton}
            name="Gap_Body"
          />
          <skinnedMesh
            material={materials["Material.006"]}
            geometry={nodes.In_Body.geometry}
            skeleton={nodes.In_Body.skeleton}
            name="In_Body"
          >
            <meshBasicMaterial transparent opacity={0} />

            <meshStandardMaterial
              polygonOffsetFactor={-1} // The mesh should take precedence over the original
              toneMapped={false}
              ref={materialRef}
              map={texture}
              polygonOffset
              transparent
            />
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.In_Body_Center.geometry}
            skeleton={nodes.In_Body_Center.skeleton}
            material={materials["Material.006"]}
            name="In_Body_Center"
          />
          <skinnedMesh
            geometry={nodes.In_Body_Center_Bot.geometry}
            skeleton={nodes.In_Body_Center_Bot.skeleton}
            material={materials["Material.006"]}
            name="In_Body_Center_Bot"
          />
          <skinnedMesh
            geometry={nodes.In_Body_Left.geometry}
            skeleton={nodes.In_Body_Left.skeleton}
            material={materials["Material.006"]}
            name="In_Body_Left"
          />
          <skinnedMesh
            geometry={nodes.In_Body_Left_Bot.geometry}
            skeleton={nodes.In_Body_Left_Bot.skeleton}
            material={materials["Material.006"]}
            name="In_Body_Left_Bot"
          />
          <skinnedMesh
            geometry={nodes.In_Body_Right.geometry}
            skeleton={nodes.In_Body_Right.skeleton}
            material={materials["Material.006"]}
            name="In_Body_Right"
          />
          <skinnedMesh
            geometry={nodes.In_Body_Right_Bot.geometry}
            skeleton={nodes.In_Body_Right_Bot.skeleton}
            material={materials["Material.006"]}
            name="In_Body_Right_Bot"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Center.geometry}
            skeleton={nodes.Out_Body_Center.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Center"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Center_Bot.geometry}
            skeleton={nodes.Out_Body_Center_Bot.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Center_Bot"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Front.geometry}
            skeleton={nodes.Out_Body_Front.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Front"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Left.geometry}
            skeleton={nodes.Out_Body_Left.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Left"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Left_Bot.geometry}
            skeleton={nodes.Out_Body_Left_Bot.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Left_Bot"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Left_In.geometry}
            skeleton={nodes.Out_Body_Left_In.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Left_In"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Right.geometry}
            skeleton={nodes.Out_Body_Right.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Right"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Right_Bot.geometry}
            skeleton={nodes.Out_Body_Right_Bot.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Right_Bot"
          />
          <skinnedMesh
            geometry={nodes.Out_Body_Right_In.geometry}
            skeleton={nodes.Out_Body_Right_In.skeleton}
            material={materials["Material.005"]}
            name="Out_Body_Right_In"
          />
        </group>
        <group
          position={[0.278, 0.759, 0]}
          rotation={[0, 0, Math.PI]}
          name="Armature"
        >
          <primitive object={nodes.Bone_1} />
          <primitive object={nodes.Bone001_1} />
          <primitive object={nodes.Bone002_1} />
          <primitive object={nodes.neutral_bone_1} />
          <skinnedMesh
            geometry={nodes.Gap_Header.geometry}
            material={nodes.Gap_Header.material}
            skeleton={nodes.Gap_Header.skeleton}
            name="Gap_Header"
          />
          <skinnedMesh
            material={materials["Material.004"]}
            geometry={nodes.In_Header.geometry}
            skeleton={nodes.In_Header.skeleton}
            name="In_Header"
          />
          <skinnedMesh
            geometry={nodes.Out_Header.geometry}
            material={materials["Material.003"]}
            skeleton={nodes.Out_Header.skeleton}
            name="Out_Header"
          />
        </group>
        <group
          position={[-0.306, 0.942, 0.005]}
          rotation={[0, 0, Math.PI]}
          name="Armature002"
        >
          <primitive object={nodes.Bone_2} />
          <primitive object={nodes.Bone004_1} />
          <primitive object={nodes.neutral_bone_2} />
        </group>
        <skinnedMesh
          material={materials["Material.001"]}
          geometry={nodes.In_Shelf.geometry}
          skeleton={nodes.In_Shelf.skeleton}
          name="In_Shelf"
        />
        <skinnedMesh
          geometry={nodes["Gap-Shelf"].geometry}
          material={nodes["Gap-Shelf"].material}
          skeleton={nodes["Gap-Shelf"].skeleton}
          name="Gap-Shelf"
        />
        <skinnedMesh
          geometry={nodes.Out_Shelf_Front.geometry}
          skeleton={nodes.Out_Shelf_Front.skeleton}
          material={materials["Material.002"]}
          name="Out_Shelf_Front"
        />
        <skinnedMesh
          material={materials["Material.002"]}
          geometry={nodes.Out_Shelf.geometry}
          skeleton={nodes.Out_Shelf.skeleton}
          name="Out_Shelf"
        />
        <skinnedMesh
          geometry={nodes.In_Shelf_Back.geometry}
          skeleton={nodes.In_Shelf_Back.skeleton}
          material={materials["Material.001"]}
          name="In_Shelf_Back"
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/40425-cs-stkr.gltf");
